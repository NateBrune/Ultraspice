// SPDX-License-Identifier: AGPL-3.0
// Feel free to change the license, but this is what we use

// Feel free to change this version of Solidity. We support >=0.6.0 <0.7.0;
pragma solidity 0.6.12;
pragma experimental ABIEncoderV2;

// These are the core Yearn libraries
import {
    BaseStrategy,
    StrategyParams
} from "@yearnvaults/contracts/BaseStrategy.sol";
import {
    SafeERC20,
    SafeMath,
    IERC20,
    Address
} from "@openzeppelin/contracts/token/ERC20/SafeERC20.sol";

// Import interfaces for many popular DeFi projects, or add your own!
//import "../interfaces/<protocol>/<Interface>.sol";
import "./interfaces/Arrakis/IGauge.sol";
import "./interfaces/Arrakis/IArrakisVaultV1.sol";
import "./interfaces/Arrakis/IArrakisV1RouterStaking.sol";
import "./interfaces/Uni/IV3SwapRouterLite.sol";

contract Strategy is BaseStrategy {
    using SafeERC20 for IERC20;
    using Address for address;
    using SafeMath for uint256;

    address public coin1; // Primary coin in lp token, payola will be harvested into before deposit into Arrakis
    address public coin2; // Secondary coin in lp token, also valid for deposits
    address public payola; // The reward token we are harvesting
    address public proxy; // This is where we deposit
    address public gauge; // This is where we claim
    address swapRouter; // This is the exchange we sell on;

    uint24 public feeTier1;
    uint24 public feeTier2;
    uint256 public keepPayolaPercent = 1000; // over keepMaticDenominator
    uint256 public constant keepPayolaDenominator = 10000;
    uint256 public constant minPayola = 100000;

    constructor(address _vault, address _arrakisProxy, address _gauge, address _payolaToken, address _swapRouter, uint24 _feeTier1, uint24 _feeTier2) public BaseStrategy(_vault) {
        // You can set these parameters on deployment to whatever you want
        // maxReportDelay = 6300;
        // profitFactor = 100;
        // debtThreshold = 0;
        IArrakisVaultV1 arrakisVault = IArrakisVaultV1(address(want));
        coin1 = address(arrakisVault.token0());
        coin2 = address(arrakisVault.token1());
        payola = _payolaToken;

        _setProxyAndGauge(coin1, coin2, _arrakisProxy, _gauge);
        _setSwapRouterandFees(_swapRouter, _feeTier1, _feeTier2);

    }

    function _setProxyAndGauge(address _coin1, address _coin2, address _proxy, address _gauge) internal {
        require(_proxy != address(0), "invalid proxy address");
        require(_gauge != address(0), "invalid gauge address");

        proxy = _proxy;
        gauge = _gauge;
        IERC20(_coin1).safeApprove(proxy, type(uint256).max);
        IERC20(_coin2).safeApprove(proxy, type(uint256).max);
        IERC20(want).safeApprove(gauge, type(uint256).max);
    }

    function _setSwapRouterandFees(address _router, uint24 _feeTier1, uint24 _feeTier2) internal {
        require(_router != address(0), "invalid router address");

        swapRouter = _router;
        feeTier1 = _feeTier1;
        feeTier2 = _feeTier2;


        IERC20(payola).safeApprove(swapRouter, type(uint256).max);
        IERC20(coin1).safeApprove(swapRouter, type(uint256).max);
        IERC20(coin2).safeApprove(swapRouter, type(uint256).max);
    }

    // ******** ONLY STRATEGIST ************

    function setProxyAndGauge(address _coin1, address _coin2, address _proxy, address _gauge) external onlyStrategist {
        _setProxyAndGauge(_coin1, _coin2, _proxy, _gauge);
    }

    function setswapRouterandFees(address _router, uint24 _feeTier1, uint24 _feeTeir2) external onlyStrategist {
        _setSwapRouterandFees(_router, _feeTier1, _feeTeir2);
    }
    // ******** OVERRIDE THESE METHODS FROM BASE CONTRACT ************

    function name() external view override returns (string memory) {
        // Add your own name here, suggestion e.g. "StrategyCreamYFI"
        return "StrategyArrakisLP";
    }

    function estimatedTotalAssets() public view override returns (uint256) {
        // TODO: Build a more accurate estimate using the value of all positions in terms of `want`
        uint256 gaugeBal = IERC20(gauge).balanceOf(address(this));
        uint256 wantBal = want.balanceOf(address(this));
        return gaugeBal.add(wantBal);
    }

    function prepareReturn(uint256 _debtOutstanding)
        internal
        override
        returns (
            uint256 _profit,
            uint256 _loss,
            uint256 _debtPayment
        )
    {
        // TODO: Do stuff here to free up any returns back into `want`
        // NOTE: Return `_profit` which is value generated by all positions, priced in `want`
        // NOTE: Should try to free up at least `_debtOutstanding` of underlying position

        uint256 gaugeTokens = IERC20(gauge).balanceOf(address(this));
        if(gaugeTokens > 0){
            IGauge(gauge).claim_rewards(address(this));

            IERC20 PAY = IERC20(payola);
            uint256 payBalance = PAY.balanceOf(address(this));
            if(payBalance>minPayola){
                uint256 keepPay = payBalance.mul(keepPayolaPercent).div(keepPayolaDenominator);
                PAY.safeTransfer(rewards, keepPay);
                payBalance = payBalance.sub(keepPay);

                // Sell into both tokens in equal proportion for deposit.
                _sell(payola, coin1, feeTier1, payBalance); 
                uint256 oneBal = IERC20(coin1).balanceOf(address(this));
                _sell(coin1, coin2, feeTier2, oneBal.div(2));
            }
            
            uint256 bal1 = IERC20(coin1).balanceOf(address(this));
            uint256 bal2 = IERC20(coin2).balanceOf(address(this));

            if(bal1 > 0 || bal2 > 0){
                IArrakisV1RouterStaking router = IArrakisV1RouterStaking(proxy);
                router.addLiquidity(IArrakisVaultV1(address(want)), bal1, bal2, 0, 0, address(this));
            }
            
        }
    }

    function _sell(address fromToken, address toToken, uint24 fee, uint256 amount) internal {
        require(IERC20(fromToken).balanceOf(address(this)) > 0, "Insufficient funds to sell");
            IV3SwapRouterLite.ExactInputSingleParams memory params =
                IV3SwapRouterLite.ExactInputSingleParams({
                    tokenIn: fromToken,
                    tokenOut: toToken,
                    fee: fee,
                    recipient: address(this),
                    deadline: block.timestamp + 15,
                    amountIn: amount,
                    amountOutMinimum: 1,
                    sqrtPriceLimitX96: 0
                });
            uint256 amountOut = IV3SwapRouterLite(swapRouter).exactInputSingle(params);
    }

    function adjustPosition(uint256 _debtOutstanding) internal override {
        // TODO: Do something to invest excess `want` tokens (from the Vault) into your positions
        // NOTE: Try to adjust positions so that `_debtOutstanding` can be freed up on *next* harvest (not immediately)
        uint256 bal = IERC20(want).balanceOf(address(this));
        IGauge(gauge).deposit(bal, address(this));
    }

    function liquidatePosition(uint256 _amountNeeded)
        internal
        override
        returns (uint256 _liquidatedAmount, uint256 _loss)
    {
        // TODO: Do stuff here to free up to `_amountNeeded` from all positions back into `want`
        // NOTE: Maintain invariant `want.balanceOf(this) >= _liquidatedAmount`
        // NOTE: Maintain invariant `_liquidatedAmount + _loss <= _amountNeeded`

        uint256 totalAssets = estimatedTotalAssets();
        if (_amountNeeded > totalAssets) {
            _liquidatedAmount = totalAssets;
            _loss = _amountNeeded.sub(totalAssets);
        } else {
            _liquidatedAmount = _amountNeeded;
        }
        IGauge(gauge).withdraw(_liquidatedAmount);
    }

    function liquidateAllPositions() internal override returns (uint256) {
        // TODO: Liquidate all positions and return the amount freed.
        return want.balanceOf(address(this));
    }

    // NOTE: Can override `tendTrigger` and `harvestTrigger` if necessary

    function prepareMigration(address _newStrategy) internal override {
        // TODO: Transfer any non-`want` tokens to the new strategy
        // NOTE: `migrate` will automatically forward all `want` in this strategy to the new one
    }

    // Override this to add all tokens/tokenized positions this contract manages
    // on a *persistent* basis (e.g. not just for swapping back to want ephemerally)
    // NOTE: Do *not* include `want`, already included in `sweep` below
    //
    // Example:
    //
    //    function protectedTokens() internal override view returns (address[] memory) {
    //      address[] memory protected = new address[](3);
    //      protected[0] = tokenA;
    //      protected[1] = tokenB;
    //      protected[2] = tokenC;
    //      return protected;
    //    }
    function protectedTokens()
        internal
        view
        override
        returns (address[] memory)
    {}

    /**
     * @notice
     *  Provide an accurate conversion from `_amtInWei` (denominated in wei)
     *  to `want` (using the native decimal characteristics of `want`).
     * @dev
     *  Care must be taken when working with decimals to assure that the conversion
     *  is compatible. As an example:
     *
     *      given 1e17 wei (0.1 ETH) as input, and want is USDC (6 decimals),
     *      with USDC/ETH = 1800, this should give back 1800000000 (180 USDC)
     *
     * @param _amtInWei The amount (in wei/1e-18 ETH) to convert to `want`
     * @return The amount in `want` of `_amtInEth` converted to `want`
     **/
    function ethToWant(uint256 _amtInWei)
        public
        view
        virtual
        override
        returns (uint256)
    {
        // TODO create an accurate price oracle
        return _amtInWei;
    }
}
